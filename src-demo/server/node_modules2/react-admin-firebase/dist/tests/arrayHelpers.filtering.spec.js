import { filterArray, doesRowMatch, getFieldReferences, } from "../src/misc";
describe("array filter", function () {
    test("filter array, filter empty", function () {
        var input = [{ name: "Apple" }, { name: "Pear" }, { name: "Banana" }];
        var result = filterArray(input);
        var expected = [{ name: "Apple" }, { name: "Pear" }, { name: "Banana" }];
        expect(result).toEqual(expected);
    });
    test("filter array, filter empty obj", function () {
        var input = [{ name: "Apple" }, { name: "Pear" }, { name: "Banana" }];
        var result = filterArray(input, {});
        var expected = [{ name: "Apple" }, { name: "Pear" }, { name: "Banana" }];
        expect(result).toEqual(expected);
    });
    test("filters array, simple", function () {
        var input = [{ a: 1 }, { a: 2 }];
        var expected = [{ a: 2 }];
        var result = filterArray(input, { a: 2 });
        expect(result).toEqual(expected);
    });
    test("filter array, multiple", function () {
        var input = [
            { name: "Ben", age: 32 },
            { name: "Dale", age: 23 },
            { name: "Fred", age: 23 },
        ];
        var result = filterArray(input, { age: 32 });
        var expected = [{ name: "Ben", age: 32 }];
        expect(result).toEqual(expected);
    });
    test("filter array, multiple search", function () {
        var input = [
            { name: "Ben", age: 32 },
            { name: "Dale", age: 23 },
            { name: "Fred", age: 23 },
        ];
        var result = filterArray(input, { name: "Ben", age: 32 });
        var expected = [{ name: "Ben", age: 32 }];
        expect(result).toEqual(expected);
    });
    test("filter array, filter boolean true", function () {
        var input = [
            { name: "Apple", enabled: false },
            { name: "Pear", enabled: false },
            { name: "Banana", enabled: true },
        ];
        var result = filterArray(input, { enabled: true });
        var expected = [{ name: "Banana", enabled: true }];
        expect(result).toEqual(expected);
    });
    test("filter array, filter boolean false", function () {
        var input = [
            { name: "Apple", enabled: false },
            { name: "Pear", enabled: false },
            { name: "Banana", enabled: true },
        ];
        var result = filterArray(input, { enabled: false });
        var expected = [
            { name: "Apple", enabled: false },
            { name: "Pear", enabled: false },
        ];
        expect(result).toEqual(expected);
    });
    test("filter array, filter boolean null", function () {
        var input = [
            { name: "Apple", enabled: false },
            { name: "Pear", enabled: false },
            { name: "Banana", enabled: true },
        ];
        var result = filterArray(input, { enabled: null });
        var expected = [
            { name: "Apple", enabled: false },
            { name: "Pear", enabled: false },
        ];
        expect(result).toEqual(expected);
    });
    test("doesRowMatch, partial", function () {
        var inputRow = { name: "Banana", enabled: true };
        var result = doesRowMatch(inputRow, "name", "ana");
        expect(result).toEqual(true);
    });
    test("doesRowMatch, deep object", function () {
        var inputRow = { name: "Banana", deep: { enabled: "Apple" } };
        var result = doesRowMatch(inputRow, "deep.enabled", "Apple");
        expect(result).toEqual(true);
    });
    test("doesRowMatch, deep object path doesn't exist", function () {
        var inputRow = { name: "Banana", deep: { enabled: "Apple" } };
        var result = doesRowMatch(inputRow, "deep.enabled.sss", "Apple");
        expect(result).toEqual(false);
    });
    test("getFieldReferences, simple field", function () {
        var res = getFieldReferences("name", "Dan");
        var expected = [{ searchField: "name", searchValue: "Dan" }];
        expect(res).toEqual(expected);
    });
    test("getFieldReferences, nested field", function () {
        var res = getFieldReferences("name", { value: "Alex" });
        var expected = [
            { searchField: "name.value", searchValue: "Alex" },
        ];
        expect(res).toEqual(expected);
    });
    test("getFieldReferences, nested field", function () {
        var res = getFieldReferences("customer", { details: { age: 25 } });
        var expected = [
            { searchField: "customer.details.age", searchValue: 25 },
        ];
        expect(res).toEqual(expected);
    });
});
//# sourceMappingURL=arrayHelpers.filtering.spec.js.map