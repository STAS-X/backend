var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { recusivelyCheckObjectValue, translateDocFromFirestore, } from "../src/misc";
import { MakeMockClient } from "./integration-tests/utils/test-helpers";
function blankResultObj() {
    return {
        parsedDoc: {},
        refdocs: []
    };
}
describe("timestamp-parser tests", function () {
    test("null doesn't break it", function () {
        var doc = null;
        translateDocFromFirestore(doc);
        expect(doc).toBe(null);
    });
    test("retains falsey", function () {
        var doc = { a: null };
        translateDocFromFirestore(doc);
        expect(doc.a).toBe(null);
    });
    test("retains number", function () {
        var doc = { a: 1 };
        translateDocFromFirestore(doc);
        expect(doc.a).toBe(1);
    });
    test("retains string", function () {
        var doc = { a: "1" };
        translateDocFromFirestore(doc);
        expect(doc.a).toBe("1");
    });
    test("retains object", function () {
        var doc = { a: { f: "1" } };
        translateDocFromFirestore(doc);
        expect(doc.a.f).toBe("1");
    });
    test("converts timestamp simple", function () {
        var doc = { a: makeTimestamp() };
        translateDocFromFirestore(doc);
        expect(doc.a).toBeInstanceOf(Date);
    });
    test("converts timestamp deep nested", function () {
        var doc = { a: { b: makeTimestamp(), c: { d: makeTimestamp() } } };
        translateDocFromFirestore(doc);
        expect(doc.a.b).toBeInstanceOf(Date);
        expect(doc.a.c.d).toBeInstanceOf(Date);
    });
    test("converts timestamp array", function () {
        var doc = { a: { c: [makeTimestamp(), makeTimestamp()] } };
        translateDocFromFirestore(doc);
        expect(doc.a.c[0]).toBeInstanceOf(Date);
        expect(doc.a.c[1]).toBeInstanceOf(Date);
    });
    test("converts timestamp array", function () {
        var doc = { a: { c: [{ d: makeTimestamp() }] } };
        translateDocFromFirestore(doc);
        expect(doc.a.c[0].d).toBeInstanceOf(Date);
    });
    test("retains falsey", function () {
        var doc = ["okay"];
        recusivelyCheckObjectValue(doc, '', blankResultObj());
        expect(doc[0]).toBe("okay");
    });
    test("check converts document references", function () { return __awaiter(void 0, void 0, void 0, function () {
        var client, doc, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, MakeMockClient()];
                case 1:
                    client = _a.sent();
                    doc = { ref: makeDocumentRef("something/here", client) };
                    result = blankResultObj();
                    recusivelyCheckObjectValue(doc, '', result);
                    expect(result.refdocs.length).toBe(1);
                    expect(doc.ref).toBe("here");
                    return [2 /*return*/];
            }
        });
    }); });
});
function makeTimestamp() {
    return new MockTimeStamp();
}
function makeDocumentRef(path, client) {
    return client.fireWrapper.db().doc(path);
}
var MockTimeStamp = /** @class */ (function () {
    function MockTimeStamp() {
    }
    MockTimeStamp.prototype.toDate = function () {
        return new Date();
    };
    return MockTimeStamp;
}());
//# sourceMappingURL=firestore-parser.spec.js.map