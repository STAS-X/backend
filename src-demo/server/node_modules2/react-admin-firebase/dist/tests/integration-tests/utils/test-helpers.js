var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { initializeTestEnvironment } from '@firebase/rules-unit-testing';
import { FirebaseWrapperStub } from "./FirebaseWrapperStub";
import { FireClient } from "../../../src/providers/database/FireClient";
function makeSafeId(projectId) {
    return projectId.split(' ').join('').toLowerCase();
}
var BlankLogger = /** @class */ (function () {
    function BlankLogger() {
        this.logDocument = function (count) { return function () { return null; }; };
        this.SetEnabled = function (isEnabled) { return null; };
        this.ResetCount = function (shouldReset) { return null; };
    }
    return BlankLogger;
}());
export { BlankLogger };
export function MakeMockClient(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var randomProjectId, fire;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    randomProjectId = Math.random().toString(32).slice(2, 10);
                    return [4 /*yield*/, initFireWrapper(randomProjectId, options)];
                case 1:
                    fire = _a.sent();
                    return [2 /*return*/, new FireClient(fire, options, new BlankLogger)];
            }
        });
    });
}
export function initFireWrapper(projectId, rafOptions) {
    if (rafOptions === void 0) { rafOptions = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var safeId, testOptions, enivornment, context, fire;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    safeId = makeSafeId(projectId);
                    testOptions = { projectId: safeId, firestore: { host: 'localhost', port: 8080 } };
                    return [4 /*yield*/, initializeTestEnvironment(testOptions)];
                case 1:
                    enivornment = _a.sent();
                    context = enivornment.unauthenticatedContext();
                    fire = new FirebaseWrapperStub(
                    // Slight (inconseqential) mismatch between test API and actual API
                    context.firestore(), context, rafOptions);
                    return [2 /*return*/, fire];
            }
        });
    });
}
export var sleep = function (ms) { return new Promise(function (res) { return setTimeout(res, ms); }); };
export function createDoc(db, collectionName, docName, obj) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, db.collection(collectionName).doc(docName).set(obj)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
export function getDocsFromCollection(db, collectionName) {
    return __awaiter(this, void 0, void 0, function () {
        var allDocs, docsData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, db.collection(collectionName).get()];
                case 1:
                    allDocs = _a.sent();
                    return [4 /*yield*/, Promise.all(allDocs.docs.map(function (doc) {
                            return (__assign(__assign({}, doc.data()), { id: doc.id }));
                        }))];
                case 2:
                    docsData = _a.sent();
                    return [2 /*return*/, docsData];
            }
        });
    });
}
//# sourceMappingURL=test-helpers.js.map