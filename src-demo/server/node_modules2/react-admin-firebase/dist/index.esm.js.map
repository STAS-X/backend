{"version":3,"file":"index.esm.js","sources":["../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/dispatcher.ts","../src/misc/translate-from-firestore.ts","../src/misc/document-parser.ts","../src/misc/internal.models.ts","../src/misc/pathHelper.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/misc/firebase-models.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/translate-to-firestore.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  const isArraySearch = Array.isArray(searchValue);\n  if (isArraySearch) {\n    return searchValue.includes(searchThis);\n  }\n  return false;\n}\n","type SearchValues = {} | number | string | boolean | null ;\ntype SearchValue = SearchValues | SearchValue[];\n\nexport interface SearchObj {\n  searchField: string;\n  searchValue: SearchValue;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | SearchValue\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as SearchValue,\n      },\n    ];\n  }\n  const tree = {} as Record<string, SearchValue>;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { log } from './logger';\n\nexport type DispatchEvent =\n\t'FILE_UPLOAD_WILL_START' |\n\t'FILE_UPLOAD_PROGRESS' |\n\t'FILE_UPLOAD_PAUSED' |\n\t'FILE_UPLOAD_RUNNING' |\n\t'FILE_UPLOAD_CANCELED' |\n\t'FILE_UPLOAD_COMPLETE' |\n\t'FILE_SAVED';\n\nexport function dispatch(\n\teventName: DispatchEvent,\n\tfileName: string,\n\tdata?: any,\n): void {\n\tconst eventMonitor = document.getElementById('eventMonitor');\n\tif (!eventMonitor) {\n\t\tlog(`eventMonitor not found to dispatch event ${eventName} for ${fileName}`);\n\t\treturn;\n\t}\n\tconst eventData = { fileName, data };\n\tlet event = new CustomEvent(eventName, { detail: eventData });\n\teventMonitor.dispatchEvent(event);\n};","import { set, has } from \"lodash\";\nimport { IFirebaseWrapper } from \"providers/database\";\nimport { REF_INDENTIFIER } from \"./internal.models\";\nimport { logError } from \"./logger\";\nimport { FireStoreDocumentRef } from \"./firebase-models\";\n\nexport interface RefDocFound {\n  fieldPath: string;\n  refDocPath: string;\n}\n\nexport interface FromFirestoreResult {\n  parsedDoc: any;\n  refdocs: RefDocFound[];\n}\n\nexport function translateDocFromFirestore(obj: any) {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: FromFirestoreResult = {\n    parsedDoc: {},\n    refdocs: [],\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyCheckObjectValue(\n  input: any,\n  fieldPath: string,\n  result: FromFirestoreResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as any[]).map((value, index) =>\n      recusivelyCheckObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isDocumentReference = isInputADocReference(input);\n  if (isDocumentReference) {\n    const ref = input as FireStoreDocumentRef;\n    result.refdocs.push({ fieldPath: fieldPath, refDocPath: ref.path });\n    return ref.id;\n  }\n  const isObject = typeof input === \"object\";\n  if (isObject) {\n    Object.keys(input).map((key) => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value, key, result);\n    });\n    return input;\n  }\n  return input;\n}\n\nfunction isInputADocReference(input: any): boolean {\n  const isDocumentReference = typeof input.id === \"string\" &&\n    typeof input.firestore === \"object\" &&\n    typeof input.parent === \"object\" &&\n    typeof input.path === \"string\";\n  return isDocumentReference;\n}\n\nexport function applyRefDocs(\n  doc: any,\n  refDocs: RefDocFound[],\n) {\n  refDocs.map((d) => {\n    set(doc, REF_INDENTIFIER + d.fieldPath, d.refDocPath);\n  });\n  return doc;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isPrimitive = !fieldValue || typeof fieldValue !== 'object';\n  if (isPrimitive) {\n    return fieldValue\n  }\n  const isFileField = has(fieldValue, 'src');\n  if (isFileField) {\n    try {\n      const src = await fireWrapper\n        .storage()\n        .ref(fieldValue.src)\n        .getDownloadURL();\n      return {\n        ...fieldValue,\n        src,\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n      });\n      return fieldValue;\n    }\n  }\n  const isArray = Array.isArray(fieldValue);\n  if (isArray) {\n    return Promise.all(\n      (fieldValue as any[]).map(async (value, index) => {\n        fieldValue[index] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    );\n  }\n  const isDocumentReference = isInputADocReference(fieldValue);\n  if (isDocumentReference) {\n    return fieldValue;\n  }\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  if (isObject) {\n    return Promise.all(\n      Object.keys(fieldValue).map(async (key) => {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    );\n  }\n};\n","import { FireStoreQueryDocumentSnapshot, FireStoreDocumentSnapshot } from \"./firebase-models\";\nimport { logWarn } from \"./logger\";\nimport { applyRefDocs, translateDocFromFirestore } from \"./translate-from-firestore\";\nimport * as ra from './react-admin-models';\n\nexport function parseFireStoreDocument<T extends ra.Record>(doc: FireStoreQueryDocumentSnapshot | FireStoreDocumentSnapshot | undefined): T {\n  if (!doc) {\n    logWarn('parseFireStoreDocument: no doc', { doc });\n    return {} as T;\n  }\n  const data = doc.data();\n  const result = translateDocFromFirestore(data);\n  const dataWithRefs = applyRefDocs(result.parsedDoc, result.refdocs);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...dataWithRefs } as T;\n}\n","export const REF_INDENTIFIER = \"___REF_FULLPATH_\";\n\nexport interface ParsedRefDoc {\n  ___refpath: string;\n  ___refid: string;\n}\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import {\n  IFirebaseWrapper,\n} from './IFirebaseWrapper';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\nimport {\n  FireApp,\n  FireAuth,\n  FireAuthUserCredentials,\n  FireStorage,\n  FireStoragePutFileResult,\n  FireStore,\n  FireStoreBatch,\n  FireStoreCollectionRef,\n  FireUploadTaskSnapshot,\n  FireUser\n} from 'misc/firebase-models';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: FireStore;\n  private app: FireApp;\n  public options: RAFirebaseOptions;\n\n  constructor(\n    inputOptions: RAFirebaseOptions | undefined,\n    firebaseConfig: {},\n  ) { \n    const optionsSafe = inputOptions || {};\n    this.options = optionsSafe;\n    this.app = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  dbGetCollection(absolutePath: string): FireStoreCollectionRef {\n    return this.firestore.collection(absolutePath);\n  }\n  dbCreateBatch(): FireStoreBatch {\n    return this.firestore.batch();\n  }\n  dbMakeNewId(): string {\n    return this.firestore.collection(\"collections\").doc().id\n  }\n\n  public OnUserLogout(callBack: (u: FireUser | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n  putFile(storagePath: string, rawFile: any): FireStoragePutFileResult {\n    const task = this.app.storage().ref(storagePath).put(rawFile);\n    const taskResult = new Promise<FireUploadTaskSnapshot>(\n      (res, rej) => task.then(res).catch(rej)\n    );\n    const downloadUrl = taskResult.then(t => t.ref.getDownloadURL()).then(url => url as string)\n    return {\n      task,\n      taskResult,\n      downloadUrl,\n    }\n  }\n  async getStorageDownloadUrl(fieldSrc: string): Promise<string> {\n    return this.app.storage().ref(fieldSrc).getDownloadURL();\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  async authSetPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    return this.app.auth()\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n  async authSigninEmailPassword(email: string, password: string): Promise<FireAuthUserCredentials> {\n    const user = await this.app.auth().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return user;\n  }\n  async authSignOut(): Promise<void> {\n    return this.app.auth().signOut();\n  }\n  async authGetUserLoggedIn(): Promise<FireUser> {\n    return new Promise((resolve, reject) => {\n      const auth = this.app.auth();\n      if (auth.currentUser) return resolve(auth.currentUser);\n      const unsubscribe = this.app.auth().onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n  public async GetUserLogin(): Promise<FireUser> {\n    return this.authGetUserLoggedIn();\n  }\n\n  /** @deprecated */\n  public auth(): FireAuth {\n    return this.app.auth();\n  }\n  /** @deprecated */\n  public storage(): FireStorage {\n    return this.app.storage();\n  }\n  /** @deprecated */\n  public GetApp(): FireApp {\n    return this.app;\n  }\n  /** @deprecated */\n  public db(): FireStore {\n    return this.firestore;\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps?.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\n\nexport type FireUser = firebase.User;\nexport type FireApp = firebase.app.App;\n\nexport type FireStorage = firebase.storage.Storage;\nexport type FireStorageReference = firebase.storage.Reference;\nexport type FireUploadTaskSnapshot = firebase.storage.UploadTaskSnapshot;\nexport type FireUploadTask = firebase.storage.UploadTask;\nexport type FireStoragePutFileResult = {\n  task: FireUploadTask, \n  taskResult: Promise<FireUploadTaskSnapshot>,\n  downloadUrl: Promise<string>,\n}\n\nexport type FireAuth = firebase.auth.Auth;\nexport type FireAuthUserCredentials = firebase.auth.UserCredential;\n\nexport type FireStore = firebase.firestore.Firestore;\nexport type FireStoreBatch = firebase.firestore.WriteBatch;\nexport type FireStoreTimeStamp = firebase.firestore.FieldValue;\nexport type FireStoreDocumentRef = firebase.firestore.DocumentReference;\nexport type FireStoreDocumentSnapshot = firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>;\nexport type FireStoreCollectionRef = firebase.firestore.CollectionReference;\nexport type FireStoreQueryDocumentSnapshot = firebase.firestore.QueryDocumentSnapshot;\nexport type FireStoreQuery = firebase.firestore.Query;\nexport type FireStoreQueryOrder = firebase.firestore.OrderByDirection;\n\nexport const TASK_PAUSED = firebase.storage.TaskState.PAUSED\nexport const TASK_RUNNING = firebase.storage.TaskState.RUNNING\nexport const TASK_CANCELED = firebase.storage.TaskState.CANCELED\n","import { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  logWarn,\n  IFirestoreLogger,\n  parseFireStoreDocument,\n} from '../../misc';\nimport { FireStoreCollectionRef } from 'misc/firebase-models';\n\ntype IResourceItem = {} & { id: string, deleted?: boolean };\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: FireStoreCollectionRef;\n  list: Array<IResourceItem>;\n}\n\nexport class ResourceManager {\n  private resources: Record<string, IResource> = {};\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => parseFireStoreDocument<IResourceItem>(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = parseFireStoreDocument(docSnap);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.fireWrapper.dbGetCollection(absolutePath);\n    const list: Array<IResourceItem> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: FireStoreCollectionRef,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): FireStoreCollectionRef {\n    const collRef = collectionQuery ? collectionQuery(collection) : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set, get } from \"lodash\";\nimport { TASK_CANCELED, TASK_PAUSED, TASK_RUNNING } from \"../../misc/firebase-models\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  dispatch,\n  translateDocToFirestore,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public transformToDb(resourceName: string, documentData: any, docId: string): any {\n    if (typeof this.options.transformToDb === 'function') {\n      return this.options.transformToDb(resourceName, documentData, docId);\n    }\n    return documentData;\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const result = translateDocToFirestore(data);\n    const uploads = result.uploads;\n    await Promise.all(\n      uploads.map(async (u) => {\n        const link = await this.uploadAndGetLink(\n          u.rawFile,\n          docPath,\n          u.fieldSlashesPath,\n          !!this.options.useFileNamesInStorage\n        );\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string,\n    useFileName: boolean\n  ): Promise<string | undefined> {\n    const storagePath = useFileName\n      ? joinPaths(docPath, fieldPath, rawFile.name)\n      : joinPaths(docPath, fieldPath);\n    return this.saveFile(storagePath, rawFile);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    try {\n      const { task, taskResult, downloadUrl } = this.fireWrapper.putFile(storagePath, rawFile);\n      const { name } = rawFile;\n      // monitor upload status & progress\n      dispatch('FILE_UPLOAD_WILL_START', name);\n      task.on('state_changed', (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        log('Upload is ' + progress + '% done');\n        dispatch('FILE_UPLOAD_PROGRESS', name, progress);\n        switch (snapshot.state) {\n          case TASK_PAUSED:\n            log('Upload is paused');\n            dispatch('FILE_UPLOAD_PAUSED', name);\n            break;\n          case TASK_RUNNING:\n            log('Upload is running');\n            dispatch('FILE_UPLOAD_RUNNING', name);\n            break;\n          case TASK_CANCELED:\n            log('Upload has been canceled');\n            dispatch('FILE_UPLOAD_CANCELED', name);\n            break;\n          // case storage.TaskState.ERROR:\n            // already handled by catch\n          // case storage.TaskState.SUCCESS:\n            // already handled by then\n        }\n      });\n      const [getDownloadURL] = await Promise.all([\n        downloadUrl,\n        taskResult,\n      ]);\n      dispatch('FILE_UPLOAD_COMPLETE', name);\n      dispatch('FILE_SAVED', name);\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (get(storageError, 'code') === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { REF_INDENTIFIER } from \"./internal.models\";\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\ninterface ParsedDocRef {\n  fieldDotsPath: string;\n  refPath: string;\n}\n\ninterface ParseResult {\n  parsedDoc: any;\n  uploads: ParsedUpload[];\n  refdocs: ParsedDocRef[];\n}\n\nexport function translateDocToFirestore(obj: any): ParseResult {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: ParseResult = {\n    uploads: [],\n    refdocs: [],\n    parsedDoc: {},\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  result: ParseResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isRefField =\n    typeof fieldPath === \"string\" && fieldPath.includes(REF_INDENTIFIER);\n  if (isRefField) {\n    const refDocFullPath = input as string;\n    result.refdocs.push({\n      fieldDotsPath: fieldPath,\n      refPath: refDocFullPath,\n    });\n    return;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isFileField = !!input && input.hasOwnProperty(\"rawFile\");\n  if (isFileField) {\n    result.uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split(\".\").join(\"/\"),\n      rawFile: input.rawFile,\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, result);\n  });\n  return input;\n}\n","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQuery } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: FireStoreDocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: FireStoreCollectionRef,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreDocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: FireStoreCollectionRef,\n  queryBase: FireStoreQuery,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: FireStoreDocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import { FireStoreCollectionRef, FireStoreQuery, FireStoreQueryOrder } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: FireStoreCollectionRef,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<FireStoreQuery> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: FireStoreQuery,\n  filters: { [fieldName: string]: any }\n): FireStoreQuery {\n  const res = Object.entries(filters).reduce((acc,[fieldName, fieldValue]) => {\n    const opStr = fieldValue && Array.isArray(fieldValue) ? 'in' : '==';\n    return acc.where(fieldName, opStr, fieldValue);\n  }, query);\n  return res;\n}\n\nexport function sortToQuery(\n  query: FireStoreQuery,\n  sort: { field: string; order: string }\n): FireStoreQuery {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as FireStoreQueryOrder;\n    return query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: FireStoreQuery,\n  params: TParams,\n  collection: FireStoreCollectionRef,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreQuery> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot } from 'misc/firebase-models';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(doc => parseFireStoreDocument<T>(doc));\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d));\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: FireStoreCollectionRef,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: FireStoreDocumentSnapshot,\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"../misc/firebase-models\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = ((error as any) || '').toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, translateDocFromFirestore } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log(\"GetOne\", { resourceName, params });\n  const { rm } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    return { data: dataSingle as T };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  const ids = params.ids;\n  log(\"GetMany\", { resourceName, resource: r, params, ids });\n  const matchDocSnaps = await Promise.all(\n    ids.map(idObj => {\n      if (typeof idObj === 'string') {\n        return r.collection.doc(idObj).get()\n      }\n      // Will get and resolve reference documents into the current doc\n      return r.collection.doc((idObj as any)['___refid']).get()\n    })\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter: Record<string, ra.Identifier> = {};\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, id);\n  await r.collection.doc(id).update(docObjTransformed);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      const docObjTransformed = client.transformToDb(resourceName, docObj, idStr);\n      await r.collection\n        .doc(idStr)\n        .update(docObjTransformed);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    const docObjTransformed = client.transformToDb(resourceName, docObj, overridenId);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObjTransformed, { merge: false });\n    return {\n      data: {\n        ...docObjTransformed,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.dbMakeNewId();\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, newId);\n  await r.collection.doc(newId).set(docObjTransformed, { merge: false });\n  return {\n    data: {\n      ...docObjTransformed,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error as any);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.dbCreateBatch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr);\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error as any)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\nimport { IFirebaseWrapper } from './database';\nimport { FireUser } from '../misc/firebase-models';\n\nclass AuthClient {\n  private fireWrapper: IFirebaseWrapper;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    return this.fireWrapper.authSetPersistence(persistenceInput);\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.fireWrapper.authSigninEmailPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.fireWrapper.authSignOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Recieved authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<any> {\n    return this.getUserLogin();\n  }\n\n  public getUserLogin(): Promise<FireUser> {\n    return this.fireWrapper.authGetUserLoggedIn();\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTToken: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): ReactAdminFirebaseAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: ReactAdminFirebaseAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nexport type ReactAdminFirebaseAuthProvider = RaAuthProvider & {\n  // Custom Functions\n  getAuthUser: () => Promise<FireUser>,\n  getJWTAuthTime: () => Promise<string | null>,\n  getJWTExpirationTime: () => Promise<string | null>,\n  getJWTSignInProvider: () => Promise<string | null>,\n  getJWTClaims: () => Promise<{ [key: string]: any; } | null>,\n  getJWTToken: () => Promise<string | null>,  \n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n"],"names":["sortArray","data","field","dir","sort","a","b","rawA","get","rawB","isAsc","Number","isFinite","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","Object","keys","map","fieldName","getSubObjects","value","searchField","searchValue","tree","leaves","recursivelyWalk","obj","path","key","hasOwnProperty","objVal","currentPath","Array","push","objectFlatten","getFieldReferences","filter","row","reduce","acc","cur","searchThis","toString","includes","isArray","doesRowMatch","LogNoOp","LoggerBase","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","console","log","bind","warn","error","logger","logError","logWarn","KEY_SINGLE","dispatch","eventName","fileName","eventMonitor","document","getElementById","event","CustomEvent","detail","dispatchEvent","isInputADocReference","input","id","firestore","parent","recursivelyMapStorageUrls","fireWrapper","fieldValue","Promise","all","index","isFileField","has","storage","ref","src","getDownloadURL","_exit2","parseFireStoreDocument","doc","result","parsedDoc","refdocs","recusivelyCheckObjectValue","fieldPath","toDate","refDocPath","translateDocFromFirestore","dataWithRefs","refDocs","d","set","applyRefDocs","getAbsolutePath","rootRef","relativePath","Error","rootRefValue","withSlashes","join","split","length","slice","joinPaths","FirebaseWrapper","inputOptions","firebaseConfig","optionsSafe","options","app","window","firebase","apps","_firebase$apps","initializeApp","ObtainFirebaseApp","dbGetCollection","absolutePath","collection","dbCreateBatch","batch","dbMakeNewId","OnUserLogout","callBack","auth","onAuthStateChanged","user","isLoggedOut","putFile","storagePath","rawFile","task","put","taskResult","res","rej","then","downloadUrl","t","url","getStorageDownloadUrl","fieldSrc","serverTimestamp","FieldValue","authSetPersistence","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","setPersistence","authSigninEmailPassword","email","password","signInWithEmailAndPassword","authSignOut","signOut","authGetUserLoggedIn","resolve","reject","_this10","currentUser","unsubscribe","GetUserLogin","GetApp","db","TASK_PAUSED","TaskState","PAUSED","TASK_RUNNING","RUNNING","TASK_CANCELED","CANCELED","ResourceManager","flogger","_this","resources","TryGetResource","resourceName","refresh","collectionQuery","TryGetResourcePromise","_this3","RefreshResource","GetResource","resource","_this5","initPath","_this7","_this7$options","lazyLoading","_this7$options$lazyLo","enabled","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","GetSingleDoc","docId","_this9","docSnap","exists","hasBeenInited","pathAbsolute","allResources","getUserIdentifier","_this13","associateUsersById","getCurrentUserEmail","identifier","getCurrentUserId","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","transformToDb","documentData","parseDataAndUpload","r","docPath","uploads","recusivelyParseObjectValue","fieldDotsPath","refPath","fieldSlashesPath","translateDocToFirestore","u","_this2","uploadAndGetLink","useFileNamesInStorage","link","addCreatedByFields","disableMeta","currentUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","addUpdatedByFields","updateAtSelector","updated_at","GetSelectorsUpdateAt","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","name","saveFile","on","snapshot","progress","bytesTransferred","totalBytes","state","relativeFilePaths","storageError","pact","_Pact","callback","_settle","v","onRejected","thenable","getQueryCursor","params","btoa","JSON","stringify","paramsToQuery","defaultParamsToQueryOptions","filtersStepQuery","filters","entries","opStr","where","sortStepQuery","parsedOrder","order","toLocaleLowerCase","orderBy","sortToQuery","pagination","page","perPage","queryCursor","startAfter","limit","queryBase","currentPage","newQuery","startAt","lastQueryCursor","snapshots","docsLength","currentPageParams","findLastQueryCursor","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","array","i","FirebaseLazyLoadingClient","client","apiGetList","tryGetResource","softDelete","resultsCount","message","total","nextPageCursor","allCursorsKey","localCursorKeys","newCursors","parse","concat","setQueryCursor","getNextPageParams","checkIfOnLastPage","isOnLastPage","parsedData","apiGetManyReference","_this4","filterWithTarget","target","nextElementSnapshot","empty","clearQueryCursors","forEach","cursor","DataProvider","optionsInput","run","cb","errorMsg","code","statusTxt","regexResult","exec","status","retrieveStatusCode","errorObj","json","verifyDataProviderArgs","ResetCount","shouldReset","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","logging","firestoreCostsLogger","_options$firestoreCos","_options$firestoreCos2","persistCount","getList","lazyClient","filterSafe","dataPage","softDeleted","filteredData","pageStart","GetList","getOne","dataSingle","GetOne","getMany","ids","idObj","matchDocSnaps","permittedData","matches","snap","GetMany","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","docObj","docObjTransformed","Update","updateMany","idStr","returnData","UpdateMany","create","newId","merge","hasOverridenDocId","overridenId","_r$collection$doc$get","Create","previousData","DeleteSoft","Delete","deleteMany","DeleteManySoft","docToDelete","commit","DeleteMany","AuthClient","persistence","HandleAuthLogin","username","getUserLogin","HandleAuthLogout","HandleAuthError","errorHttp","retrieveStatusTxt","HandleAuthCheck","HandleGetPermissions","_this6","getIdTokenResult","token","claims","e","HandleGetIdentity","_this8","displayName","photoURL","fullName","avatar","HandleGetJWTAuthTime","authTime","HandleGetJWTExpirationTime","_this12","expirationTime","HandleGetJWTSignInProvider","_this14","signInProvider","HandleGetJWTIssuedAtTime","_this16","issuedAtTime","HandleGetJWTToken","_this18","AuthProvider","VerifyAuthProviderArgs","login","logout","checkAuth","checkError","getPermissions","getIdentity","getAuthUser","getJWTAuthTime","getJWTExpirationTime","getJWTSignInProvider","getJWTClaims","getJWTToken"],"mappings":"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"}