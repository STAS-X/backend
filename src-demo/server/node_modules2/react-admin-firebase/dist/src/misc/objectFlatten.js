export function getFieldReferences(fieldName, value) {
    var isFalsy = !value;
    var isSimple = isFalsy ||
        typeof value === 'string' ||
        typeof value === 'number' ||
        typeof value === 'boolean';
    if (isSimple) {
        return [
            {
                searchField: fieldName,
                searchValue: value,
            },
        ];
    }
    var tree = {};
    tree[fieldName] = value;
    return objectFlatten(tree);
}
export function objectFlatten(tree) {
    var leaves = [];
    var recursivelyWalk = function (obj, path) {
        path = path || "";
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                var objVal = obj && obj[key];
                var currentPath = !!path ? path + "." + key : key;
                var isWalkable = typeof objVal === 'object' || objVal instanceof Array;
                if (isWalkable) {
                    recursivelyWalk(objVal, currentPath);
                }
                else {
                    leaves.push({ searchField: currentPath, searchValue: objVal });
                }
            }
        }
    };
    recursivelyWalk(tree, null);
    return leaves;
}
//# sourceMappingURL=objectFlatten.js.map