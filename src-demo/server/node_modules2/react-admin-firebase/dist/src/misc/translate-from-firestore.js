var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { set, has } from "lodash";
import { REF_INDENTIFIER } from "./internal.models";
import { logError } from "./logger";
export function translateDocFromFirestore(obj) {
    var isObject = !!obj && typeof obj === "object";
    var result = {
        parsedDoc: {},
        refdocs: [],
    };
    if (!isObject) {
        return result;
    }
    Object.keys(obj).map(function (key) {
        var value = obj[key];
        obj[key] = recusivelyCheckObjectValue(value, key, result);
    });
    result.parsedDoc = obj;
    return result;
}
export function recusivelyCheckObjectValue(input, fieldPath, result) {
    var isFalsey = !input;
    if (isFalsey) {
        return input;
    }
    var isPrimitive = typeof input !== "object";
    if (isPrimitive) {
        return input;
    }
    var isTimestamp = !!input.toDate && typeof input.toDate === "function";
    if (isTimestamp) {
        return input.toDate();
    }
    var isArray = Array.isArray(input);
    if (isArray) {
        return input.map(function (value, index) {
            return recusivelyCheckObjectValue(value, "".concat(fieldPath, ".").concat(index), result);
        });
    }
    var isDocumentReference = isInputADocReference(input);
    if (isDocumentReference) {
        var ref = input;
        result.refdocs.push({ fieldPath: fieldPath, refDocPath: ref.path });
        return ref.id;
    }
    var isObject = typeof input === "object";
    if (isObject) {
        Object.keys(input).map(function (key) {
            var value = input[key];
            input[key] = recusivelyCheckObjectValue(value, key, result);
        });
        return input;
    }
    return input;
}
function isInputADocReference(input) {
    var isDocumentReference = typeof input.id === "string" &&
        typeof input.firestore === "object" &&
        typeof input.parent === "object" &&
        typeof input.path === "string";
    return isDocumentReference;
}
export function applyRefDocs(doc, refDocs) {
    refDocs.map(function (d) {
        set(doc, REF_INDENTIFIER + d.fieldPath, d.refDocPath);
    });
    return doc;
}
export var recursivelyMapStorageUrls = function (fireWrapper, fieldValue) { return __awaiter(void 0, void 0, void 0, function () {
    var isPrimitive, isFileField, src, error_1, isArray, isDocumentReference, isObject;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                isPrimitive = !fieldValue || typeof fieldValue !== 'object';
                if (isPrimitive) {
                    return [2 /*return*/, fieldValue];
                }
                isFileField = has(fieldValue, 'src');
                if (!isFileField) return [3 /*break*/, 4];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, fireWrapper
                        .storage()
                        .ref(fieldValue.src)
                        .getDownloadURL()];
            case 2:
                src = _a.sent();
                return [2 /*return*/, __assign(__assign({}, fieldValue), { src: src })];
            case 3:
                error_1 = _a.sent();
                logError("Error when getting download URL", {
                    error: error_1,
                });
                return [2 /*return*/, fieldValue];
            case 4:
                isArray = Array.isArray(fieldValue);
                if (isArray) {
                    return [2 /*return*/, Promise.all(fieldValue.map(function (value, index) { return __awaiter(void 0, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = fieldValue;
                                        _b = index;
                                        return [4 /*yield*/, recursivelyMapStorageUrls(fireWrapper, value)];
                                    case 1:
                                        _a[_b] = _c.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                }
                isDocumentReference = isInputADocReference(fieldValue);
                if (isDocumentReference) {
                    return [2 /*return*/, fieldValue];
                }
                isObject = !isArray && typeof fieldValue === "object";
                if (isObject) {
                    return [2 /*return*/, Promise.all(Object.keys(fieldValue).map(function (key) { return __awaiter(void 0, void 0, void 0, function () {
                            var value, _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        value = fieldValue[key];
                                        _a = fieldValue;
                                        _b = key;
                                        return [4 /*yield*/, recursivelyMapStorageUrls(fireWrapper, value)];
                                    case 1:
                                        _a[_b] = _c.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                }
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=translate-from-firestore.js.map