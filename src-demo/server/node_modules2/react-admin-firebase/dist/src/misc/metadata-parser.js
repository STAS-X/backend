var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
export function AddCreatedByFields(obj, fireWrapper, rm, options) {
    return __awaiter(this, void 0, void 0, function () {
        var currentUserIdentifier, createAtSelector, createBySelector;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (options.disableMeta) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, rm.getUserIdentifier()];
                case 1:
                    currentUserIdentifier = _a.sent();
                    createAtSelector = GetSelectorsCreateAt(options);
                    createBySelector = GetSelectorsCreateBy(options);
                    obj[createAtSelector] = fireWrapper.serverTimestamp();
                    obj[createBySelector] = currentUserIdentifier;
                    return [2 /*return*/];
            }
        });
    });
}
export function AddUpdatedByFields(obj, fireWrapper, rm, options) {
    return __awaiter(this, void 0, void 0, function () {
        var currentUserIdentifier, updateAtSelector, updateBySelector;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (options.disableMeta) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, rm.getUserIdentifier()];
                case 1:
                    currentUserIdentifier = _a.sent();
                    updateAtSelector = GetSelectorsUpdateAt(options);
                    updateBySelector = GetSelectorsUpdateBy(options);
                    obj[updateAtSelector] = fireWrapper.serverTimestamp();
                    obj[updateBySelector] = currentUserIdentifier;
                    return [2 /*return*/];
            }
        });
    });
}
export function GetSelectorsUpdateAt(options) {
    if (options.renameMetaFields && options.renameMetaFields.updated_at) {
        return options.renameMetaFields.updated_at;
    }
    var casing = options.metaFieldCasing;
    var defautCase = "lastupdate";
    if (!casing) {
        return defautCase;
    }
    if (casing === "camel") {
        return "lastUpdate";
    }
    if (casing === "snake") {
        return "last_update";
    }
    if (casing === "pascal") {
        return "LastUpdate";
    }
    if (casing === "kebab") {
        return "last-update";
    }
    return defautCase;
}
export function GetSelectorsUpdateBy(options) {
    if (options.renameMetaFields && options.renameMetaFields.updated_by) {
        return options.renameMetaFields.updated_by;
    }
    var casing = options.metaFieldCasing;
    var defautCase = "updatedby";
    if (!casing) {
        return defautCase;
    }
    if (casing === "camel") {
        return "updatedBy";
    }
    if (casing === "snake") {
        return "updated_by";
    }
    if (casing === "pascal") {
        return "UpdatedBy";
    }
    if (casing === "kebab") {
        return "updated-by";
    }
    return defautCase;
}
export function GetSelectorsCreateAt(options) {
    if (options.renameMetaFields && options.renameMetaFields.created_at) {
        return options.renameMetaFields.created_at;
    }
    var casing = options.metaFieldCasing;
    var defautCase = "createdate";
    if (!casing) {
        return defautCase;
    }
    if (casing === "camel") {
        return "createDate";
    }
    if (casing === "snake") {
        return "create_date";
    }
    if (casing === "pascal") {
        return "CreateDate";
    }
    if (casing === "kebab") {
        return "create-date";
    }
    return defautCase;
}
export function GetSelectorsCreateBy(options) {
    if (options.renameMetaFields && options.renameMetaFields.created_by) {
        return options.renameMetaFields.created_by;
    }
    var casing = options.metaFieldCasing;
    var defautCase = "createdby";
    if (!casing) {
        return defautCase;
    }
    if (casing === "camel") {
        return "createdBy";
    }
    if (casing === "snake") {
        return "created_by";
    }
    if (casing === "pascal") {
        return "CreatedBy";
    }
    if (casing === "kebab") {
        return "created-by";
    }
    return defautCase;
}
//# sourceMappingURL=metadata-parser.js.map