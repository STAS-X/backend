import { REF_INDENTIFIER } from "./internal.models";
export function translateDocToFirestore(obj) {
    var isObject = !!obj && typeof obj === "object";
    var result = {
        uploads: [],
        refdocs: [],
        parsedDoc: {},
    };
    if (!isObject) {
        return result;
    }
    Object.keys(obj).map(function (key) {
        var value = obj[key];
        recusivelyParseObjectValue(value, key, result);
    });
    result.parsedDoc = obj;
    return result;
}
export function recusivelyParseObjectValue(input, fieldPath, result) {
    var isFalsey = !input;
    if (isFalsey) {
        return input;
    }
    var isRefField = typeof fieldPath === "string" && fieldPath.includes(REF_INDENTIFIER);
    if (isRefField) {
        var refDocFullPath = input;
        result.refdocs.push({
            fieldDotsPath: fieldPath,
            refPath: refDocFullPath,
        });
        return;
    }
    var isPrimitive = typeof input !== "object";
    if (isPrimitive) {
        return input;
    }
    var isTimestamp = !!input.toDate && typeof input.toDate === "function";
    if (isTimestamp) {
        return input.toDate();
    }
    var isArray = Array.isArray(input);
    if (isArray) {
        return input.map(function (value, index) {
            return recusivelyParseObjectValue(value, "".concat(fieldPath, ".").concat(index), result);
        });
    }
    var isFileField = !!input && input.hasOwnProperty("rawFile");
    if (isFileField) {
        result.uploads.push({
            fieldDotsPath: fieldPath,
            fieldSlashesPath: fieldPath.split(".").join("/"),
            rawFile: input.rawFile,
        });
        delete input.rawFile;
        return;
    }
    Object.keys(input).map(function (key) {
        var value = input[key];
        recusivelyParseObjectValue(value, "".concat(fieldPath, ".").concat(key), result);
    });
    return input;
}
//# sourceMappingURL=translate-to-firestore.js.map