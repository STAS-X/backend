import { get, isEmpty } from 'lodash';
import { getFieldReferences } from './objectFlatten';
export function sortArray(data, field, dir) {
    data.sort(function (a, b) {
        var rawA = get(a, field);
        var rawB = get(b, field);
        var isAsc = dir === "asc";
        var isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);
        if (isNumberField) {
            return basicSort(rawA, rawB, isAsc);
        }
        var isStringField = typeof rawA === 'string' && typeof rawB === 'string';
        if (isStringField) {
            var aParsed = rawA.toLowerCase();
            var bParsed = rawB.toLowerCase();
            return basicSort(aParsed, bParsed, isAsc);
        }
        var isDateField = rawA instanceof Date && rawB instanceof Date;
        if (isDateField) {
            return basicSort(rawA, rawB, isAsc);
        }
        return basicSort(!!rawA, !!rawB, isAsc);
    });
}
function basicSort(aValue, bValue, isAsc) {
    if (aValue > bValue) {
        return isAsc ? 1 : -1;
    }
    if (aValue < bValue) {
        return isAsc ? -1 : 1;
    }
    return 0;
}
export function filterArray(data, searchFields) {
    if (!searchFields || isEmpty(searchFields)) {
        return data;
    }
    var searchObjs = [];
    Object.keys(searchFields).map(function (fieldName) {
        var fieldValue = searchFields[fieldName];
        var getSubObjects = getFieldReferences(fieldName, fieldValue);
        searchObjs.push.apply(searchObjs, getSubObjects);
    });
    var filtered = data.filter(function (row) {
        return searchObjs.reduce(function (acc, cur) {
            var res = doesRowMatch(row, cur.searchField, cur.searchValue);
            return res && acc;
        }, true);
    });
    return filtered;
}
export function doesRowMatch(row, searchField, searchValue) {
    var searchThis = get(row, searchField);
    var bothAreFalsey = !searchThis && !searchValue;
    if (bothAreFalsey) {
        return true;
    }
    var nothingToSearch = !searchThis;
    if (nothingToSearch) {
        return false;
    }
    var isStringSearch = typeof searchValue === 'string';
    if (isStringSearch) {
        return searchThis
            .toString()
            .toLowerCase()
            .includes(searchValue.toLowerCase());
    }
    var isBooleanOrNumber = typeof searchValue === 'boolean' || typeof searchValue === 'number';
    if (isBooleanOrNumber) {
        return searchThis === searchValue;
    }
    var isArraySearch = Array.isArray(searchValue);
    if (isArraySearch) {
        return searchValue.includes(searchThis);
    }
    return false;
}
//# sourceMappingURL=arrayHelpers.js.map