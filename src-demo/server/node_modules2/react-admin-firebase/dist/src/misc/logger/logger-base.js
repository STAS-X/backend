export var LogNoOp = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return null;
};
var LoggerBase = /** @class */ (function () {
    function LoggerBase(title, cacheEnabledKey) {
        this.title = title;
        this.cacheEnabledKey = cacheEnabledKey;
    }
    LoggerBase.prototype.isEnabled = function () {
        return !!localStorage.getItem(this.cacheEnabledKey);
    };
    LoggerBase.prototype.SetEnabled = function (isEnabled) {
        if (isEnabled) {
            localStorage.setItem(this.cacheEnabledKey, 'true');
        }
        else {
            localStorage.removeItem(this.cacheEnabledKey);
        }
    };
    Object.defineProperty(LoggerBase.prototype, "log", {
        get: function () {
            if (!this.isEnabled()) {
                return LogNoOp;
            }
            var boundLogFn = console.log.bind(console, this.title);
            return boundLogFn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LoggerBase.prototype, "warn", {
        get: function () {
            if (!this.isEnabled()) {
                return LogNoOp;
            }
            var boundLogFn = console.warn.bind(console, this.title);
            return boundLogFn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LoggerBase.prototype, "error", {
        get: function () {
            if (!this.isEnabled()) {
                return LogNoOp;
            }
            var boundLogFn = console.error.bind(console, this.title);
            return boundLogFn;
        },
        enumerable: false,
        configurable: true
    });
    return LoggerBase;
}());
export { LoggerBase };
//# sourceMappingURL=logger-base.js.map