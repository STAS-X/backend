var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { log, retrieveStatusTxt, logWarn, logger } from '../misc';
import { FirebaseWrapper } from './database/firebase/FirebaseWrapper';
var AuthClient = /** @class */ (function () {
    function AuthClient(firebaseConfig, optionsInput) {
        var options = optionsInput || {};
        log('Auth Client: initializing...', { firebaseConfig: firebaseConfig, options: options });
        this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);
        options.persistence && this.setPersistence(options.persistence);
    }
    AuthClient.prototype.setPersistence = function (persistenceInput) {
        return this.fireWrapper.authSetPersistence(persistenceInput);
    };
    AuthClient.prototype.HandleAuthLogin = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var username, password, user, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        username = params.username, password = params.password;
                        if (!(username && password)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.fireWrapper.authSigninEmailPassword(username, password)];
                    case 2:
                        user = _a.sent();
                        log('HandleAuthLogin: user sucessfully logged in', { user: user });
                        return [2 /*return*/, user];
                    case 3:
                        e_1 = _a.sent();
                        log('HandleAuthLogin: invalid credentials', { params: params });
                        throw new Error('Login error: invalid credentials');
                    case 4: return [3 /*break*/, 6];
                    case 5: return [2 /*return*/, this.getUserLogin()];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleAuthLogout = function () {
        return this.fireWrapper.authSignOut();
    };
    AuthClient.prototype.HandleAuthError = function (errorHttp) {
        log('HandleAuthLogin: invalid credentials', { errorHttp: errorHttp });
        var status = !!errorHttp && errorHttp.status;
        var statusTxt = retrieveStatusTxt(status);
        if (statusTxt === 'ok') {
            log('API is actually authenticated');
            return Promise.resolve();
        }
        logWarn('Recieved authentication error from API');
        return Promise.reject();
    };
    AuthClient.prototype.HandleAuthCheck = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserLogin()];
            });
        });
    };
    AuthClient.prototype.getUserLogin = function () {
        return this.fireWrapper.authGetUserLoggedIn();
    };
    AuthClient.prototype.HandleGetPermissions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, token, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, user.getIdTokenResult()];
                    case 2:
                        token = _a.sent();
                        return [2 /*return*/, token.claims];
                    case 3:
                        e_2 = _a.sent();
                        log('HandleGetPermission: no user is logged in or tokenResult error', {
                            e: e_2,
                        });
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleGetIdentity = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, uid, displayName, photoURL, identity, e_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        _a = _b.sent(), uid = _a.uid, displayName = _a.displayName, photoURL = _a.photoURL;
                        identity = {
                            id: uid,
                            fullName: "".concat(displayName !== null && displayName !== void 0 ? displayName : ''),
                            avatar: "".concat(photoURL !== null && photoURL !== void 0 ? photoURL : ''),
                        };
                        return [2 /*return*/, identity];
                    case 2:
                        e_3 = _b.sent();
                        log('HandleGetIdentity: no user is logged in', {
                            e: e_3,
                        });
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleGetJWTAuthTime = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, token, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, user.getIdTokenResult()];
                    case 2:
                        token = _a.sent();
                        return [2 /*return*/, token.authTime];
                    case 3:
                        e_4 = _a.sent();
                        log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {
                            e: e_4,
                        });
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleGetJWTExpirationTime = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, token, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, user.getIdTokenResult()];
                    case 2:
                        token = _a.sent();
                        return [2 /*return*/, token.expirationTime];
                    case 3:
                        e_5 = _a.sent();
                        log('HandleGetJWTExpirationTime: no user is logged in or tokenResult error', {
                            e: e_5,
                        });
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleGetJWTSignInProvider = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, token, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, user.getIdTokenResult()];
                    case 2:
                        token = _a.sent();
                        return [2 /*return*/, token.signInProvider];
                    case 3:
                        e_6 = _a.sent();
                        log('HandleGetJWTSignInProvider: no user is logged in or tokenResult error', {
                            e: e_6,
                        });
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleGetJWTIssuedAtTime = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, token, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, user.getIdTokenResult()];
                    case 2:
                        token = _a.sent();
                        return [2 /*return*/, token.issuedAtTime];
                    case 3:
                        e_7 = _a.sent();
                        log('HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error', {
                            e: e_7,
                        });
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AuthClient.prototype.HandleGetJWTToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, token, e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getUserLogin()];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, user.getIdTokenResult()];
                    case 2:
                        token = _a.sent();
                        return [2 /*return*/, token.token];
                    case 3:
                        e_8 = _a.sent();
                        log('HandleGetJWTToken: no user is logged in or tokenResult error', {
                            e: e_8,
                        });
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return AuthClient;
}());
export function AuthProvider(firebaseConfig, options) {
    VerifyAuthProviderArgs(firebaseConfig, options);
    logger.SetEnabled(!!(options === null || options === void 0 ? void 0 : options.logging));
    var auth = new AuthClient(firebaseConfig, options);
    var provider = {
        // React Admin Interface
        login: function (params) { return auth.HandleAuthLogin(params); },
        logout: function () { return auth.HandleAuthLogout(); },
        checkAuth: function () { return auth.HandleAuthCheck(); },
        checkError: function (error) { return auth.HandleAuthError(error); },
        getPermissions: function () { return auth.HandleGetPermissions(); },
        getIdentity: function () { return auth.HandleGetIdentity(); },
        // Custom Functions
        getAuthUser: function () { return auth.getUserLogin(); },
        getJWTAuthTime: function () { return auth.HandleGetJWTAuthTime(); },
        getJWTExpirationTime: function () { return auth.HandleGetJWTExpirationTime(); },
        getJWTSignInProvider: function () { return auth.HandleGetJWTSignInProvider(); },
        getJWTClaims: function () { return auth.HandleGetPermissions(); },
        getJWTToken: function () { return auth.HandleGetJWTToken(); },
    };
    return provider;
}
function VerifyAuthProviderArgs(firebaseConfig, options) {
    var hasNoApp = !options || !options.app;
    var hasNoConfig = !firebaseConfig;
    if (hasNoConfig && hasNoApp) {
        throw new Error('Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider');
    }
}
//# sourceMappingURL=AuthProvider.js.map