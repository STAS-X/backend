var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { log, parseFireStoreDocument, recursivelyMapStorageUrls, } from '../../misc';
import { getFullParamsForQuery, getNextPageParams, paramsToQuery, } from './paramsToQuery';
import { clearQueryCursors, setQueryCursor } from './queryCursors';
var FirebaseLazyLoadingClient = /** @class */ (function () {
    function FirebaseLazyLoadingClient(options, rm, client) {
        this.options = options;
        this.rm = rm;
        this.client = client;
    }
    FirebaseLazyLoadingClient.prototype.apiGetList = function (resourceName, reactAdminParams) {
        return __awaiter(this, void 0, void 0, function () {
            var r, params, query, snapshots, resultsCount, data, nextPageCursor, total, isOnLastPage, _a, page, perPage, parsedData;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.tryGetResource(resourceName)];
                    case 1:
                        r = _b.sent();
                        params = getFullParamsForQuery(reactAdminParams, !!this.options.softDelete);
                        log('apiGetListLazy', { resourceName: resourceName, params: params });
                        return [4 /*yield*/, paramsToQuery(r.collection, params, resourceName, this.client.flogger)];
                    case 2:
                        query = _b.sent();
                        return [4 /*yield*/, query.get()];
                    case 3:
                        snapshots = _b.sent();
                        resultsCount = snapshots.docs.length;
                        if (!resultsCount) {
                            log('apiGetListLazy', {
                                message: 'There are not records for given query',
                            });
                            return [2 /*return*/, { data: [], total: 0 }];
                        }
                        this.client.flogger.logDocument(resultsCount)();
                        data = snapshots.docs.map(function (doc) { return parseFireStoreDocument(doc); });
                        nextPageCursor = snapshots.docs[snapshots.docs.length - 1];
                        // After fetching documents save queryCursor for next page
                        setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);
                        total = 9000;
                        return [4 /*yield*/, this.checkIfOnLastPage(r.collection, params, resourceName, nextPageCursor)];
                    case 4:
                        isOnLastPage = _b.sent();
                        if (isOnLastPage) {
                            _a = params.pagination, page = _a.page, perPage = _a.perPage;
                            total = (page - 1) * perPage + data.length;
                            log('apiGetListLazy', { message: "It's last page of collection." });
                        }
                        if (!this.options.relativeFilePaths) return [3 /*break*/, 6];
                        return [4 /*yield*/, Promise.all(data.map(function (doc) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b, _i, fieldName, _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0:
                                            _a = [];
                                            for (_b in doc)
                                                _a.push(_b);
                                            _i = 0;
                                            _e.label = 1;
                                        case 1:
                                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                                            fieldName = _a[_i];
                                            _c = doc;
                                            _d = fieldName;
                                            return [4 /*yield*/, recursivelyMapStorageUrls(this.client.fireWrapper, doc[fieldName])];
                                        case 2:
                                            _c[_d] = _e.sent();
                                            _e.label = 3;
                                        case 3:
                                            _i++;
                                            return [3 /*break*/, 1];
                                        case 4: return [2 /*return*/, doc];
                                    }
                                });
                            }); }))];
                    case 5:
                        parsedData = _b.sent();
                        log('apiGetListLazy result', {
                            docs: parsedData,
                            resource: r,
                            collectionPath: r.collection.path,
                        });
                        return [2 /*return*/, {
                                data: parsedData,
                                total: total,
                            }];
                    case 6:
                        log('apiGetListLazy result', {
                            docs: data,
                            resource: r,
                            collectionPath: r.collection.path,
                        });
                        return [2 /*return*/, { data: data, total: total }];
                }
            });
        });
    };
    FirebaseLazyLoadingClient.prototype.apiGetManyReference = function (resourceName, reactAdminParams) {
        return __awaiter(this, void 0, void 0, function () {
            var r, filterWithTarget, params, query, snapshots, resultsCount, data, parsedData;
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.tryGetResource(resourceName)];
                    case 1:
                        r = _b.sent();
                        log('apiGetManyReferenceLazy', {
                            resourceName: resourceName,
                            resource: r,
                            reactAdminParams: reactAdminParams,
                        });
                        filterWithTarget = __assign(__assign({}, reactAdminParams.filter), (_a = {}, _a[reactAdminParams.target] = reactAdminParams.id, _a));
                        params = getFullParamsForQuery(__assign(__assign({}, reactAdminParams), { filter: filterWithTarget }), !!this.options.softDelete);
                        return [4 /*yield*/, paramsToQuery(r.collection, params, resourceName, this.client.flogger)];
                    case 2:
                        query = _b.sent();
                        return [4 /*yield*/, query.get()];
                    case 3:
                        snapshots = _b.sent();
                        resultsCount = snapshots.docs.length;
                        this.client.flogger.logDocument(resultsCount)();
                        data = snapshots.docs.map(function (d) { return parseFireStoreDocument(d); });
                        if (!this.options.relativeFilePaths) return [3 /*break*/, 5];
                        return [4 /*yield*/, Promise.all(data.map(function (doc) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b, _i, fieldName, _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0:
                                            _a = [];
                                            for (_b in doc)
                                                _a.push(_b);
                                            _i = 0;
                                            _e.label = 1;
                                        case 1:
                                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                                            fieldName = _a[_i];
                                            _c = doc;
                                            _d = fieldName;
                                            return [4 /*yield*/, recursivelyMapStorageUrls(this.client.fireWrapper, doc[fieldName])];
                                        case 2:
                                            _c[_d] = _e.sent();
                                            _e.label = 3;
                                        case 3:
                                            _i++;
                                            return [3 /*break*/, 1];
                                        case 4: return [2 /*return*/, doc];
                                    }
                                });
                            }); }))];
                    case 4:
                        parsedData = _b.sent();
                        log('apiGetManyReferenceLazy result', {
                            docs: parsedData,
                            resource: r,
                            collectionPath: r.collection.path,
                        });
                        return [2 /*return*/, {
                                data: parsedData,
                                total: data.length,
                            }];
                    case 5:
                        log('apiGetManyReferenceLazy result', {
                            docs: data,
                            resource: r,
                            collectionPath: r.collection.path,
                        });
                        return [2 /*return*/, { data: data, total: data.length }];
                }
            });
        });
    };
    FirebaseLazyLoadingClient.prototype.checkIfOnLastPage = function (collection, params, resourceName, nextPageCursor) {
        return __awaiter(this, void 0, void 0, function () {
            var query, nextElementSnapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, paramsToQuery(collection, params, resourceName, this.client.flogger, {
                            filters: true,
                            sort: true,
                        })];
                    case 1:
                        query = _a.sent();
                        if (!nextPageCursor) {
                            throw new Error('Page cursor was empty...');
                        }
                        return [4 /*yield*/, query
                                .startAfter(nextPageCursor)
                                .limit(1)
                                .get()];
                    case 2:
                        nextElementSnapshot = _a.sent();
                        if (!nextElementSnapshot.empty) {
                            // this.incrementFirebaseReadsCounter(1);
                        }
                        return [2 /*return*/, nextElementSnapshot.empty];
                }
            });
        });
    };
    FirebaseLazyLoadingClient.prototype.clearQueryCursors = function (resourceName) {
        clearQueryCursors(resourceName);
    };
    FirebaseLazyLoadingClient.prototype.tryGetResource = function (resourceName, collectionQuery) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.rm.TryGetResourcePromise(resourceName, collectionQuery)];
            });
        });
    };
    return FirebaseLazyLoadingClient;
}());
export { FirebaseLazyLoadingClient };
//# sourceMappingURL=FirebaseLazyLoadingClient.js.map