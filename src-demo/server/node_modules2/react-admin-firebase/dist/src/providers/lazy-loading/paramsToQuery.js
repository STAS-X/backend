var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { findLastQueryCursor, getQueryCursor } from './queryCursors';
var defaultParamsToQueryOptions = {
    filters: true,
    sort: true,
    pagination: true,
};
export function paramsToQuery(collection, params, resourceName, flogger, options) {
    if (options === void 0) { options = defaultParamsToQueryOptions; }
    return __awaiter(this, void 0, void 0, function () {
        var filtersStepQuery, sortStepQuery;
        return __generator(this, function (_a) {
            filtersStepQuery = options.filters
                ? filtersToQuery(collection, params.filter)
                : collection;
            sortStepQuery = options.sort
                ? sortToQuery(filtersStepQuery, params.sort)
                : filtersStepQuery;
            return [2 /*return*/, options.pagination
                    ? paginationToQuery(sortStepQuery, params, collection, resourceName, flogger)
                    : sortStepQuery];
        });
    });
}
export function filtersToQuery(query, filters) {
    var res = Object.entries(filters).reduce(function (acc, _a) {
        var fieldName = _a[0], fieldValue = _a[1];
        var opStr = fieldValue && Array.isArray(fieldValue) ? 'in' : '==';
        return acc.where(fieldName, opStr, fieldValue);
    }, query);
    return res;
}
export function sortToQuery(query, sort) {
    if (sort != null && sort.field !== 'id') {
        var field = sort.field, order = sort.order;
        var parsedOrder = order.toLocaleLowerCase();
        return query.orderBy(field, parsedOrder);
    }
    return query;
}
function paginationToQuery(query, params, collection, resourceName, flogger) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, page, perPage, queryCursor;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = params.pagination, page = _a.page, perPage = _a.perPage;
                    if (!(page === 1)) return [3 /*break*/, 1];
                    query = query.limit(perPage);
                    return [3 /*break*/, 5];
                case 1: return [4 /*yield*/, getQueryCursor(collection, params, resourceName, flogger)];
                case 2:
                    queryCursor = _b.sent();
                    if (!!queryCursor) return [3 /*break*/, 4];
                    return [4 /*yield*/, findLastQueryCursor(collection, query, params, resourceName, flogger)];
                case 3:
                    queryCursor = _b.sent();
                    _b.label = 4;
                case 4:
                    query = query.startAfter(queryCursor).limit(perPage);
                    _b.label = 5;
                case 5: return [2 /*return*/, query];
            }
        });
    });
}
export function getFullParamsForQuery(reactAdminParams, softdeleteEnabled) {
    return __assign(__assign({}, reactAdminParams), { filter: softdeleteEnabled
            ? __assign({ deleted: false }, reactAdminParams.filter) : reactAdminParams.filter });
}
export function getNextPageParams(params) {
    return __assign(__assign({}, params), { pagination: __assign(__assign({}, params.pagination), { page: params.pagination.page + 1 }) });
}
//# sourceMappingURL=paramsToQuery.js.map