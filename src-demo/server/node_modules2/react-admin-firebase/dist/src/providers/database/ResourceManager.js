var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { log, getAbsolutePath, logWarn, parseFireStoreDocument, } from '../../misc';
var ResourceManager = /** @class */ (function () {
    function ResourceManager(fireWrapper, options, flogger) {
        var _this = this;
        this.fireWrapper = fireWrapper;
        this.options = options;
        this.flogger = flogger;
        this.resources = {};
        this.fireWrapper.OnUserLogout(function () {
            _this.resources = {};
        });
    }
    ResourceManager.prototype.TryGetResource = function (resourceName, refresh, collectionQuery) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!refresh) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.RefreshResource(resourceName, collectionQuery)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.TryGetResourcePromise(resourceName, collectionQuery)];
                }
            });
        });
    };
    ResourceManager.prototype.GetResource = function (relativePath) {
        var resource = this.resources[relativePath];
        if (!resource) {
            throw new Error("react-admin-firebase: Can't find resource: \"".concat(relativePath, "\""));
        }
        return resource;
    };
    ResourceManager.prototype.TryGetResourcePromise = function (relativePath, collectionQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var resource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log('resourceManager.TryGetResourcePromise', {
                            relativePath: relativePath,
                            collectionQuery: collectionQuery,
                        });
                        return [4 /*yield*/, this.initPath(relativePath)];
                    case 1:
                        _a.sent();
                        resource = this.resources[relativePath];
                        if (!resource) {
                            throw new Error("react-admin-firebase: Cant find resource: \"".concat(relativePath, "\""));
                        }
                        return [2 /*return*/, resource];
                }
            });
        });
    };
    ResourceManager.prototype.RefreshResource = function (relativePath, collectionQuery) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var resource, collection, query, newDocs, count;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.lazyLoading) === null || _b === void 0 ? void 0 : _b.enabled) {
                            logWarn('resourceManager.RefreshResource', {
                                warn: 'RefreshResource is not available in lazy loading mode',
                            });
                            throw new Error('react-admin-firebase: RefreshResource is not available in lazy loading mode');
                        }
                        log('resourceManager.RefreshResource', { relativePath: relativePath, collectionQuery: collectionQuery });
                        return [4 /*yield*/, this.initPath(relativePath)];
                    case 1:
                        _c.sent();
                        resource = this.resources[relativePath];
                        collection = resource.collection;
                        query = this.applyQuery(collection, collectionQuery);
                        return [4 /*yield*/, query.get()];
                    case 2:
                        newDocs = _c.sent();
                        resource.list = newDocs.docs.map(function (doc) { return parseFireStoreDocument(doc); });
                        count = newDocs.docs.length;
                        this.flogger.logDocument(count)();
                        log('resourceManager.RefreshResource', {
                            newDocs: newDocs,
                            resource: resource,
                            collectionPath: collection.path,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    ResourceManager.prototype.GetSingleDoc = function (relativePath, docId) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, docSnap, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.initPath(relativePath)];
                    case 1:
                        _a.sent();
                        resource = this.GetResource(relativePath);
                        this.flogger.logDocument(1)();
                        return [4 /*yield*/, resource.collection.doc(docId).get()];
                    case 2:
                        docSnap = _a.sent();
                        if (!docSnap.exists) {
                            throw new Error('react-admin-firebase: No id found matching: ' + docId);
                        }
                        result = parseFireStoreDocument(docSnap);
                        log('resourceManager.GetSingleDoc', {
                            relativePath: relativePath,
                            resource: resource,
                            docId: docId,
                            docSnap: docSnap,
                            result: result,
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    ResourceManager.prototype.initPath = function (relativePath) {
        return __awaiter(this, void 0, void 0, function () {
            var rootRef, absolutePath, hasBeenInited, collection, list, resource;
            return __generator(this, function (_a) {
                rootRef = this.options && this.options.rootRef;
                absolutePath = getAbsolutePath(rootRef, relativePath);
                hasBeenInited = !!this.resources[relativePath];
                log('resourceManager.initPath()', {
                    absolutePath: absolutePath,
                    hasBeenInited: hasBeenInited,
                });
                if (hasBeenInited) {
                    log('resourceManager.initPath() has been initialized already...');
                    return [2 /*return*/];
                }
                collection = this.fireWrapper.dbGetCollection(absolutePath);
                list = [];
                resource = {
                    collection: collection,
                    list: list,
                    path: relativePath,
                    pathAbsolute: absolutePath,
                };
                this.resources[relativePath] = resource;
                log('resourceManager.initPath() setting resource...', {
                    resource: resource,
                    allResources: this.resources,
                    collection: collection,
                    collectionPath: collection.path,
                });
                return [2 /*return*/];
            });
        });
    };
    ResourceManager.prototype.getUserIdentifier = function () {
        return __awaiter(this, void 0, void 0, function () {
            var identifier, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.options.associateUsersById) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getCurrentUserId()];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.getCurrentUserEmail()];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        identifier = _a;
                        return [2 /*return*/, identifier];
                }
            });
        });
    };
    ResourceManager.prototype.getCurrentUserEmail = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fireWrapper.authGetUserLoggedIn()];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            return [2 /*return*/, user.email];
                        }
                        else {
                            return [2 /*return*/, 'annonymous user'];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ResourceManager.prototype.getCurrentUserId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fireWrapper.authGetUserLoggedIn()];
                    case 1:
                        user = _a.sent();
                        if (user) {
                            return [2 /*return*/, user.uid];
                        }
                        else {
                            return [2 /*return*/, 'annonymous user'];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ResourceManager.prototype.applyQuery = function (collection, collectionQuery) {
        var collRef = collectionQuery ? collectionQuery(collection) : collection;
        log('resourceManager.applyQuery() ...', {
            collection: collection,
            collectionQuery: (collectionQuery || '-').toString(),
            collRef: collRef,
        });
        return collRef;
    };
    return ResourceManager;
}());
export { ResourceManager };
//# sourceMappingURL=ResourceManager.js.map