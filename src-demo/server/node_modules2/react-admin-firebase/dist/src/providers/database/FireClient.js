var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { set, get } from "lodash";
import { TASK_CANCELED, TASK_PAUSED, TASK_RUNNING } from "../../misc/firebase-models";
import { AddCreatedByFields, AddUpdatedByFields, joinPaths, log, logError, dispatch, translateDocToFirestore, } from "../../misc";
import { ResourceManager } from "./ResourceManager";
var FireClient = /** @class */ (function () {
    function FireClient(fireWrapper, options, flogger) {
        this.fireWrapper = fireWrapper;
        this.options = options;
        this.flogger = flogger;
        this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);
    }
    FireClient.prototype.checkRemoveIdField = function (obj, docId) {
        if (!this.options.dontAddIdFieldToDoc) {
            obj.id = docId;
        }
    };
    FireClient.prototype.transformToDb = function (resourceName, documentData, docId) {
        if (typeof this.options.transformToDb === 'function') {
            return this.options.transformToDb(resourceName, documentData, docId);
        }
        return documentData;
    };
    FireClient.prototype.parseDataAndUpload = function (r, id, data) {
        return __awaiter(this, void 0, void 0, function () {
            var docPath, result, uploads;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!data) {
                            return [2 /*return*/, data];
                        }
                        docPath = r.collection.doc(id).path;
                        result = translateDocToFirestore(data);
                        uploads = result.uploads;
                        return [4 /*yield*/, Promise.all(uploads.map(function (u) { return __awaiter(_this, void 0, void 0, function () {
                                var link;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.uploadAndGetLink(u.rawFile, docPath, u.fieldSlashesPath, !!this.options.useFileNamesInStorage)];
                                        case 1:
                                            link = _a.sent();
                                            set(data, u.fieldDotsPath + ".src", link);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    FireClient.prototype.addCreatedByFields = function (obj) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options)];
            });
        });
    };
    FireClient.prototype.addUpdatedByFields = function (obj) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options)];
            });
        });
    };
    FireClient.prototype.uploadAndGetLink = function (rawFile, docPath, fieldPath, useFileName) {
        return __awaiter(this, void 0, void 0, function () {
            var storagePath;
            return __generator(this, function (_a) {
                storagePath = useFileName
                    ? joinPaths(docPath, fieldPath, rawFile.name)
                    : joinPaths(docPath, fieldPath);
                return [2 /*return*/, this.saveFile(storagePath, rawFile)];
            });
        });
    };
    FireClient.prototype.saveFile = function (storagePath, rawFile) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, task, taskResult, downloadUrl, name_1, getDownloadURL, storageError_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        log("saveFile() saving file...", { storagePath: storagePath, rawFile: rawFile });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = this.fireWrapper.putFile(storagePath, rawFile), task = _a.task, taskResult = _a.taskResult, downloadUrl = _a.downloadUrl;
                        name_1 = rawFile.name;
                        // monitor upload status & progress
                        dispatch('FILE_UPLOAD_WILL_START', name_1);
                        task.on('state_changed', function (snapshot) {
                            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                            log('Upload is ' + progress + '% done');
                            dispatch('FILE_UPLOAD_PROGRESS', name_1, progress);
                            switch (snapshot.state) {
                                case TASK_PAUSED:
                                    log('Upload is paused');
                                    dispatch('FILE_UPLOAD_PAUSED', name_1);
                                    break;
                                case TASK_RUNNING:
                                    log('Upload is running');
                                    dispatch('FILE_UPLOAD_RUNNING', name_1);
                                    break;
                                case TASK_CANCELED:
                                    log('Upload has been canceled');
                                    dispatch('FILE_UPLOAD_CANCELED', name_1);
                                    break;
                                // case storage.TaskState.ERROR:
                                // already handled by catch
                                // case storage.TaskState.SUCCESS:
                                // already handled by then
                            }
                        });
                        return [4 /*yield*/, Promise.all([
                                downloadUrl,
                                taskResult,
                            ])];
                    case 2:
                        getDownloadURL = (_b.sent())[0];
                        dispatch('FILE_UPLOAD_COMPLETE', name_1);
                        dispatch('FILE_SAVED', name_1);
                        log("saveFile() saved file", {
                            storagePath: storagePath,
                            taskResult: taskResult,
                            getDownloadURL: getDownloadURL,
                        });
                        return [2 /*return*/, this.options.relativeFilePaths ? storagePath : getDownloadURL];
                    case 3:
                        storageError_1 = _b.sent();
                        if (get(storageError_1, 'code') === "storage/unknown") {
                            logError('saveFile() error saving file, No bucket found! Try clicking "Get Started" in firebase -> storage', { storageError: storageError_1 });
                        }
                        else {
                            logError("saveFile() error saving file", {
                                storageError: storageError_1,
                            });
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return FireClient;
}());
export { FireClient };
//# sourceMappingURL=FireClient.js.map