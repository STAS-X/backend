var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { getAbsolutePath, log, logger, retrieveStatusCode, logError, MakeFirestoreLogger, } from "../misc";
import { FirebaseWrapper } from "./database/firebase/FirebaseWrapper";
import { FireClient } from "./database/FireClient";
import { GetList, GetMany, GetManyReference, GetOne } from "./queries";
import { Create, Delete, DeleteMany, Update, UpdateMany } from "./commands";
export function DataProvider(firebaseConfig, optionsInput) {
    var _a, _b;
    var options = optionsInput || {};
    verifyDataProviderArgs(firebaseConfig, options);
    var flogger = MakeFirestoreLogger(options);
    logger.SetEnabled(!!(options === null || options === void 0 ? void 0 : options.logging));
    flogger.SetEnabled(!!((_a = options === null || options === void 0 ? void 0 : options.firestoreCostsLogger) === null || _a === void 0 ? void 0 : _a.enabled));
    flogger.ResetCount(!((_b = options === null || options === void 0 ? void 0 : options.firestoreCostsLogger) === null || _b === void 0 ? void 0 : _b.persistCount));
    log('Creating FirebaseDataProvider', {
        firebaseConfig: firebaseConfig,
        options: options
    });
    var fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);
    function run(cb) {
        return __awaiter(this, void 0, void 0, function () {
            var res, error_1, errorMsg, code, errorObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, cb()];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                    case 2:
                        error_1 = _a.sent();
                        errorMsg = (error_1 || '').toString();
                        code = retrieveStatusCode(errorMsg);
                        errorObj = { status: code, message: errorMsg, json: res };
                        logError("DataProvider:", error_1, { errorMsg: errorMsg, code: code, errorObj: errorObj });
                        throw errorObj;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    var client = new FireClient(fireWrapper, options, flogger);
    var newProviderApi = {
        app: fireWrapper.GetApp(),
        getList: function (resource, params) {
            return run(function () { return GetList(resource, params, client); });
        },
        getOne: function (resource, params) {
            return run(function () { return GetOne(resource, params, client); });
        },
        getMany: function (resource, params) {
            return run(function () { return GetMany(resource, params, client); });
        },
        getManyReference: function (resource, params) {
            return run(function () {
                return GetManyReference(resource, params, client);
            });
        },
        update: function (resource, params) {
            return run(function () { return Update(resource, params, client); });
        },
        updateMany: function (resource, params) {
            return run(function () { return UpdateMany(resource, params, client); });
        },
        create: function (resource, params) {
            return run(function () { return Create(resource, params, client); });
        },
        delete: function (resource, params) {
            return run(function () { return Delete(resource, params, client); });
        },
        deleteMany: function (resource, params) {
            return run(function () { return DeleteMany(resource, params, client); });
        },
    };
    return newProviderApi;
}
function verifyDataProviderArgs(firebaseConfig, options) {
    var hasNoApp = !options || !options.app;
    var hasNoConfig = !firebaseConfig;
    if (hasNoConfig && hasNoApp) {
        throw new Error('Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider');
    }
    if (options && options.rootRef) {
        // Will throw error if rootRef doesn't point to a document
        getAbsolutePath(options.rootRef, 'test');
    }
}
//# sourceMappingURL=DataProvider.js.map