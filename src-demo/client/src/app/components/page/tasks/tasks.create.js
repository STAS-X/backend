import * as React from 'react';
import { useSelector } from 'react-redux';
import {
  Create,
  BooleanInput,
  DateInput,
  SimpleForm,
  TextInput,
  SelectInput,
  SelectArrayInput,
  NumberInput,
  FunctionField,
  ReferenceInput,
  FileInput,
  FileField,
  ArrayInput,
  SimpleFormIterator,
  useCreate,
  useCreateContext,
  CreateButton,
  SaveButton,
  Toolbar,
  useNotify,
  useRedirect,
  useRefresh,
  useInput,
  Title,
  ReferenceArrayInput,
  FormDataConsumer,
  useGetList,
  required,
  minLength,
  maxLength,
  minValue,
  maxValue,
  number,
} from 'react-admin';
import { Box, Typography, Chip, Stack, Avatar, Button } from '@mui/material';
import AddCommentIcon from '@material-ui/icons/AddCommentRounded';
import DeleteIcon from '@material-ui/icons/DeleteRounded';
import TaskProgressBar from '../../common/progressbar/task.progress';
import TagsField from '../../common/fields/task.tags';
import { green, blue, red } from '@mui/material/colors';
import { getAuthData } from '../../../store/authcontext';
import {
  getRandomInt,
  dateWithDays,
  normalise,
} from '../../../utils/getRandomInt';
import { dateFormatter } from '../../../utils/displayDate';

const ProgressBarField = (id, progress) => (
  <Box sx={{ position: 'relative', display: 'inline-flex', minWidth: 240 }}>
    <TaskProgressBar id={id} value={progress} />
    <Typography
      variant="caption"
      component="div"
      color="text.secondary"
      sx={{ ml: 3, mt: 0.5 }}
    >
      {id === 1
        ? '–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞'
        : id === 2
        ? '–õ–∏–Ω–µ–π—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞'
        : '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞'}
    </Typography>
  </Box>
);

const getTaskResult = (data) => {
  if (data.status) {
    if (new Date(data.finishedAt) <= new Date(data.executeAt)) {
      return 1;
    } else {
      return 0;
    }
  } else {
    if (new Date(data.executeAt) < new Date()) {
      if (data.progress < 100) {
        return -1;
      } else {
        return 1;
      }
    } else {
      return 0;
    }
  }
};

const ExecutorChipSelector = ({ id, name, data }) => {
  //const record = useRecordContext();
  const result = getTaskResult(data);

  return (
    <Chip
      label={name ? name : '-XXX-'}
      avatar={
        <Avatar
          alt="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
          src={data.url ? data.url : `https://i.pravatar.cc/300?u=${id}`}
          sx={{ width: 24, height: 24 }}
        />
      }
      sx={{
        id: { id },
        fontWeight: 'bold',
        fontSize: 14,
        'span:after': {
          content: result === 1 ? '" ‚úîÔ∏è"' : '" üòê"',
          color: result >= 0 ? 'green' : 'inherit',
        },
      }}
    />
  );
};

const CustomToolbar = (props) => {
  const notify = useNotify();
  const redirect = useRedirect();
  //const refresh = useRefresh();
  const {
    invalid: isInvalid,
    record,
    handleSubmit,
    handleSubmitWithRedirect,
  } = props;

  return (
    <Toolbar
      {...props}
      style={{
        display: 'inline-flex',
        justifyContent: 'space-between',
        minWidth: 500,
      }}
    >
      <SaveButton
        label="–°–æ–∑–¥–∞—Ç—å"
        onClick={() => {
          handleSubmit();
        }}
        disabled={isInvalid}
      />
      <FormDataConsumer>
        {({ formData, ...rest }) => (
          <SaveButton
            icon={<AddCommentIcon />}
            label={'–°–æ–∑–¥–∞—Ç—å –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å'}
            onClick={() => {
              localStorage.setItem('currentTaskId', record.id);
              handleSubmit('/comments/create');
            }}
            redirect={'/comments/create'}
            handleSubmitWithRedirect={handleSubmitWithRedirect}
            disabled={!formData.commentable || isInvalid}
          />
        )}
      </FormDataConsumer>
    </Toolbar>
  );
};

const validateTitle = [
  required('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
  minLength(3, '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤'),
];
const validateDescription = [
  required('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞–Ω–∏–µ'),
  minLength(3, '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤'),
];
const validateProgress = [
  required('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏'),
  number('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º'),
  minValue(0, '–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'),
  maxValue(100, '–ù–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%'),
];

const validateExecDate = (value, allValues) => {
  if (!value) {
    return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è';
  }
  if (new Date(value) < Date.now()) {
    return '–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π';
  }
  return undefined;
};

export const TaskCreate = (props) => {
  //const notify = useNotify();
  //const refresh = useRefresh();
  const { id: taskId } = props;

  const { user: authUser } = useSelector(getAuthData());

  const transform = (data) => {
    return {
      ...data,
      userId: authUser.uid,
      createdAt: dateFormatter(Date.now()),
      finishedAt: data.status ? dateFormatter(Date.now()) : '',
    };
  };

  const handleError = ({ error }) => {
    notify(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ${error}`, { type: 'warning' }); // default message is 'ra.notification.created'
    refresh();
  };

  return (
    <>
      {authUser && (
        <Create
          {...props}
          title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"
          onError={handleError}
          transform={transform}
          hasShow={false}
          redirect={false}
        >
          <SimpleForm
            mode="onBlur"
            warnWhenUnsavedChanges
            toolbar={<CustomToolbar />}
          >
            <FunctionField
              addLabel={false}
              render={(record) => (
                <h3 className="titleDialog">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ </h3>
              )}
            />
            <TextInput
              label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
              source="title"
              validate={validateTitle}
              defaultValue={'–ó–∞–≥–æ–ª–æ–≤–æ–∫'}
            />
            <TextInput
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              source="description"
              validate={validateDescription}
              defaultValue={'–¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ'}
            />
            <FormDataConsumer>
              {({ formData, ...rest }) => {
                return (
                  <Stack direction="row" display="inline-grid">
                    <SelectInput
                      resettable={true}
                      label="–ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä"
                      source="progressType"
                      validate={required('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä')}
                      //validate={required('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä')}
                      optionText={(choise) =>
                        ProgressBarField(
                          choise.id,
                          !isNaN(formData.progress)
                            ? formData.progress
                            : getRandomInt(30, 80)
                        )
                      }
                      choices={[
                        { id: 1, name: '–ö—Ä—É–≥–æ–≤–æ–π' },
                        { id: 2, name: '–õ–∏–Ω–µ–π—á–∞—Ç—ã–π' },
                        { id: 3, name: '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' },
                      ]}
                    />

                    <ReferenceArrayInput
                      label="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"
                      allowEmpty={false}
                      source="executors"
                      reference="users"
                      filter={{ id_neq: authUser.uid }}
                      validate={required('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π')}
                      sort={{ field: 'name', order: 'ASC' }}
                    >
                      <SelectArrayInput
                        name="executors"
                        optionText={(choise) => (
                          <ExecutorChipSelector {...choise} data={formData} />
                        )}
                        helperText="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
                      />
                    </ReferenceArrayInput>

                    <TagsField {...props.record} />
                  </Stack>
                );
              }}
            </FormDataConsumer>

            <NumberInput
              label="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å (%)"
              source="progress"
              step={10}
              parse={(value) => normalise(value, 0, 100)}
              validate={validateProgress}
              defaultValue={0}
            />
            <DateInput
              label="–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
              source="executeAt"
              parse={dateFormatter}
              validate={validateExecDate}
              defaultValue={dateWithDays(7)}
            />
            <BooleanInput
              label="–ó–∞–≤–µ—Ä—à–∏—Ç—å"
              source="status"
              defaultValue={false}
            />

            <BooleanInput
              label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
              source="commentable"
              defaultValue={true}
            />
          </SimpleForm>
        </Create>
      )}
    </>
  );
};
